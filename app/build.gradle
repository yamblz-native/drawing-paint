apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../code_quality_tools/jacoco.gradle'
apply plugin: 'com.frogermcs.androiddevmetrics'
apply from: '../code_quality_tools/quality.gradle'
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'io.fabric'

android {
    // Declared in dependencies.gradle in the root of the project.
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools

    defaultConfig {
        applicationId 'ru.shmakova.painter'
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code // Notice that you may want to use BUILD_NUMBER from CI in real project with own CI.
        versionName versions.name

        // Make generated apks contain version name and code.
        archivesBaseName = "app-${versions.name}-${versions.code}"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    signingConfigs {
        yamblz {
            storeFile file('keystore.jks')
            storePassword 'yamblz'
            keyAlias 'yamblz'
            keyPassword 'yamblz'
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.yamblz
            applicationIdSuffix '.debug'
        }

        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true // Fail early.
    }

    packagingOptions {
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    // This allows us see tests execution progress in the output on the CI.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

// Libraries declared in dependencies.gradle in the root of the project
dependencies {
    compile libraries.dagger
    annotationProcessor libraries.daggerCompiler

    compile libraries.supportAnnotations
    compile libraries.supportAppCompat
    compile libraries.supportDesign
    compile libraries.supportCustomTabs
    compile libraries.supportAnimated
    compile libraries.supportPreferences

    compile libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler

    compile libraries.timber
    compile libraries.spectrum
    compile libraries.mdColors
    compile libraries.firebase
    compile libraries.appmetrica
    compile libraries.rxandroid
    compile libraries.rxjava
    compile libraries.rxbinding
    compile libraries.rxbindingSupport

    // Developer tools (Developer Settings)
    compile libraries.stetho
    compile libraries.leakCanary
    compile libraries.tinyDancer
    compile libraries.lynx
    compile libraries.processPhoenix

    testCompile libraries.junit
    testCompile libraries.robolectric
    testCompile libraries.assertJ
    testCompile libraries.equalsVerifier
    testCompile libraries.mockitoCore
    testCompile libraries.devMetricsNoOp

    androidTestCompile libraries.supportTestRunner
    androidTestCompile libraries.supportTestRules
    androidTestCompile libraries.espressoCore
    androidTestCompile(libraries.espressoContrib) {
        // Causes IncompatibleClassChangeError. As alwaysâ€¦
        exclude module: 'support-annotations'
        exclude module: 'recyclerview-v7'
        exclude module: 'support-v4'
    }

    compile(libraries.crashlytics) {
        transitive = true;
    }
}

configurations.all {
    resolutionStrategy {
        // Force our version of support-annotations, we have a conflict between app and androidTest dependency resolution.
        force libraries.supportAnnotations
        force libraries.supportDesign
        force libraries.supportAppCompat
        force libraries.supportCustomTabs
        force libraries.supportAnimated
        force libraries.supportPreferences
    }
}

// Check if the build requires dex count
def withDexcount = project.hasProperty('withDexcount')
if (withDexcount) {
    apply plugin: 'com.getkeepsafe.dexcount'

    dexcount {
        format = 'list'
        includeFieldCount = true
        includeTotalMethodCount = true
        verbose = false
        maxTreeDepth = Integer.MAX_VALUE
    }
}

apply plugin: 'com.google.gms.google-services'